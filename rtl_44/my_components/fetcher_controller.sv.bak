module fetcher_controller
#(
    parameter DEFAULT_FREQ_DIV = 1227,
    parameter DEFAULT_PAUSE = 1'B1,
    parameter DEFAULT_FORWARD = 1'B1,
    parameter FREQ_DIV_WIDTH = 32,    

    parameter D = 8'h 23,
    parameter E = 8'h24,
    parameter F = 8'h2b,
    parameter R = 8'h2d,
    parameter B = 8'h32
)
(
    input logic         clk,
    input logic [7:0]   scan_code,
    input logic         kbd_data_ready,
    input logic         rst,
    output logic        [FREQ_DIV_WIDTH - 1:0] sample_freq_div,
    output logic        pause,
    output logic        forward,
    output logic        fetcher_reset
);

    

    logic [FREQ_DIV_WIDTH + 2 : 0] state;
    assign fetcher_reset = state[0];
    assign forward = state[1];
    assign pause = state[2];
    assign sample_freq_div = state[FREQ_DIV_WIDTH + 2 : 3];
    

    always_ff @(posedge clk) begin
        if (rst) begin
            sample_freq_div <= DEFAULT_FREQ_DIV;
            pause <= DEFAULT_PAUSE;
            forward <= DEFAULT_FORWARD;
            fetcher_reset <= 1'b0;
        end
        else if (kbd_data_ready)begin
            fetcher_reset <= 1'b0;
            case(scan_code)
                D: pause <= 1'b1;
                E: pause <= 1'b0;
                F: forward <= 1'b1;
                B: forward <= 1'b0;
                R: fetcher_reset <= 1'b1;
            endcase
        end 
        else fetcher_reset <= 1'b0;
    end
endmodule

